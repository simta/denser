This file contains an outline of the basic dense API.

XXX This file is currently out of date! Consult the comments within
dense.c and dense.h for up to date specifications.

DenseHandle dense_open()
    Returns a DenseHandle.

int dense_config( DenseHandle dh, int dctype, char *dcval )
    This function allows a general way to add DenseData components
    of the sort that are normally added through resolv.conf.

    This function takes three arguments:

    A DenseHandle to be configured.

    The type of the dense component to be added to the DenseHandle.
    Some of the types require the third argument, contents.

    The value of the dense component being added. This argument is only
    required for certain types of dense component, and is ignored by types
    that do not require it.

    Possible types include:
	DC_FILLCONF:    requests that dense_config() use the information
			found in resolv.conf to add components. This command
			causes dense_config() to ignore the dcval argument.

	DC_CLEAR:       clears all components from the DenseHandle. This
			command causes dense_config() to ignore the
			dcval argument.

	DC_SPATH:       Adds the dcval to the search path for this DenseHandle.

	DC_NSERV:	Adds the dcval to the nameserver list for this
			DenseHandle

	More values will be added here ...

int dense_query( DenseHandle dh, int nstype, char *dname )
    This function takes three arguments:

    A DenseHandle that may have been previously configured using
    dense_config().

    An integer value defining the type of the rr requested.
    These values are defined in dense.h and all begin with "DEN_T_".

    The domain name to be queried.

    dense_query() assembles and sends the query from these arguments and
    any configuration data provided through dense_config(). This function
    then returns immediately without waiting for the reply.

int dense_result( DenseHandle dh, struct timeval *timeout )
    This function takes two arguments:

    A DenseHandle that's been primed with a previous call to dense_query().

    A pointer to a timeval indicating the maximum time that this function
    is allowed to spend assembling queries and waiting for replies.

    Listens for responses and generates new queries as necessary.
    Keeps track of both the count of queries and the total time
    spent making these queries.

    If the timeout is NULL, this function blocks until
    the query is completed. The return value will then indicate sucess
    or failure.

    If a result is found, this function fills the data section in the given
    handle with the data from the reply.

    The return value is used to indicate the status of dense_result, if
    the function has completed it's operation and failed, completed and
    suceeded, or wasn't able to complete the operation in the time allocated
    to it with it's timeval.

    If timeout is non-NULL, then the timeval pointed to by timeout is
    decremented by the amount of time actually spent in this function.

    After a sucessful call to dense_result() dd_response will contain the
    response.

int dense_parse( DenseHandle dh, int section, int type,
	struct dense_rr *rrlist, char *buf, int buflen, int *rrct )
    This function takes seven arguments:

    A DenseHandle that contains a response. dense_result() must have
    been called successfully on this DenseHandle for this to be true.

    An integer defining a section number to look for the response in.
    This will be one of ANSWER, AUTHORITY, or ADDITIONAL.

    An integer value defining the type of the rr sought within the response.
    These values are defined in dense.h and all begin with "DEN_T_".

    A pointer to an array of dense_rr pointer. This pointer does not need to
    be initilized to point to any allocated memory.

    A pointer that will be set by a sucessful dense_parse() call to the
    first member of an array of struct dense_rr's.

    A pointer to a buffer that will actually hold the array of struct
    dense_rr's, and all the data used by the associated dense_rd's
    contained within them.  This buffer is allocated by the caller, and
    must have enough space to contain the full list and all of it's
    data. If dense_parse() determines that this buffer is not large
    enough to hold the list and associated data, it will return an
    error.

    An integer representing the length of this buffer.

    A pointer to an integer that will be set by a sucessful dense_parse() call
    show the count of struct dense_rr's returned in the array.

    On success, this function returns 1 to indicate success, or an error
    code to indicate the reason for failure.

    All data returned by this function will be in an uncompressed state.

void dense_free( DenseHandle )
    Disposes of a handle previously created by dns_open.

DenseData:
    Contains both the information necessary for the resolver to make
    the lookup and space to contain the returned information, as well
    as any other variables needed to maintain state.

    DenseData will probably contain a complete copy of the answer buffer.

Goals:
    We want this API to work in an object oriented fashion. That is,
    we want the innards of the API to be unknown to the user, and
    we want "Public" functions declared that will do all the operations
    on the internal structures.

    We want this API to be thread-safe. No data should be stored
    statically within the function, all state should be saved within
    the DenseData.

    We want to do a limited form of caching here... why not have
    the dense structure hold all data returned from the server,
    and then, the application can parse a previously returned
    dense structure to see if the data wanted was already sent.
